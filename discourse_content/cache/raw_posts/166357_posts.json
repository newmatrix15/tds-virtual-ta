[
  {
    "id": 590924,
    "name": "SAKSHI PATHAK",
    "username": "Sakshi6479",
    "avatar_template": "/user_avatar/discourse.onlinedegree.iitm.ac.in/sakshi6479/{size}/110446_2.png",
    "created_at": "2025-02-05T16:57:48.827Z",
    "cooked": "<p>sir I am not able to solve these question I have tried all thing also the video which you shared but still after using postman also i am unable to answer it (showing methods not allowed everytime)and also in Q8 I am having this problem<br>\n<div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://europe1.discourse-cdn.com/flex013/uploads/iitm/original/3X/d/7/d7e9677b9a8d204c98e6008ef57a884177301fad.png\" data-download-href=\"/uploads/short-url/uO2IMULv8781t3KaxFm3cnClrsx.png?dl=1\" title=\"Screenshot 2025-02-05 182750\" rel=\"noopener nofollow ugc\"><img src=\"https://europe1.discourse-cdn.com/flex013/uploads/iitm/optimized/3X/d/7/d7e9677b9a8d204c98e6008ef57a884177301fad_2_690x366.png\" alt=\"Screenshot 2025-02-05 182750\" data-base62-sha1=\"uO2IMULv8781t3KaxFm3cnClrsx\" width=\"690\" height=\"366\" srcset=\"https://europe1.discourse-cdn.com/flex013/uploads/iitm/optimized/3X/d/7/d7e9677b9a8d204c98e6008ef57a884177301fad_2_690x366.png, https://europe1.discourse-cdn.com/flex013/uploads/iitm/optimized/3X/d/7/d7e9677b9a8d204c98e6008ef57a884177301fad_2_1035x549.png 1.5x, https://europe1.discourse-cdn.com/flex013/uploads/iitm/optimized/3X/d/7/d7e9677b9a8d204c98e6008ef57a884177301fad_2_1380x732.png 2x\" data-dominant-color=\"1C1E1B\"><div class=\"meta\"><svg class=\"fa d-icon d-icon-far-image svg-icon\" aria-hidden=\"true\"><use href=\"#far-image\"></use></svg><span class=\"filename\">Screenshot 2025-02-05 182750</span><span class=\"informations\">1917\u00d71018 38.3 KB</span><svg class=\"fa d-icon d-icon-discourse-expand svg-icon\" aria-hidden=\"true\"><use href=\"#discourse-expand\"></use></svg></div></a></div></p>\n<pre><code class=\"lang-auto\">import requests\nfrom fastapi import FastAPI, HTTPException\nfrom pydantic import BaseModel\nfrom sentence_transformers import util\nfrom fastapi.middleware.cors import CORSMiddleware\nfrom typing import List\n\n# Create FastAPI app\napp = FastAPI()\n\n# Enable CORS\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"*\"],  # Allow all origins\n    allow_credentials=True,\n    allow_methods=[\"OPTIONS\", \"POST\"],  # Allow OPTIONS and POST\n    allow_headers=[\"*\"],  # Allow all headers\n)\n\n# Pydantic model to parse incoming data\nclass SimilarityRequest(BaseModel):\n    docs: List[str]\n    query: str\n\n# OpenAI API key and URL\nAPI_URL = \"https://aiproxy.sanand.workers.dev/openai/v1/embeddings\"\nAPI_KEY = \"enter your key\"  # Replace with your actual API key\n\ndef get_embeddings(docs: List[str]) -&gt; List[List[float]]:\n    \"\"\"Retrieve embeddings for a list of documents from OpenAI's API.\"\"\"\n    headers = {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": f\"Bearer {API_KEY}\",\n    }\n    \n    data = {\n        \"model\": \"text-embedding-3-small\",  # Use the correct model\n        \"input\": docs\n    }\n\n    response = requests.post(API_URL, json=data, headers=headers)\n\n    if response.status_code != 200:\n        raise HTTPException(status_code=response.status_code, detail=\"API request failed\")\n\n    response_data = response.json()\n    if 'data' not in response_data:\n        raise KeyError(\"Missing 'data' field in API response\")\n\n    return [embedding['embedding'] for embedding in response_data['data']]\n\n@app.post(\"/similarity\")\nasync def similarity(request: SimilarityRequest):\n    # Get embeddings for docs and query\n    docs = request.docs\n    query = request.query\n\n    # Get embeddings for the documents and query\n    all_docs = docs + [query]  # Combine documents and query into one list\n    embeddings = get_embeddings(all_docs)  # Get embeddings from OpenAI API\n\n    doc_embeddings = embeddings[:-1]  # All embeddings except for the query\n    query_embedding = embeddings[-1]  # The last embedding is for the query\n\n    # Calculate cosine similarities\n    similarities = util.cos_sim(query_embedding, doc_embeddings)[0].cpu().numpy()\n\n    # Sort documents by similarity (highest first)\n    sorted_docs = sorted(zip(docs, similarities), key=lambda x: x[1], reverse=True)\n\n    # Return the top 3 most similar documents\n    top_matches = [doc for doc, _ in sorted_docs[:3]]\n    \n    return {\"matches\": top_matches}\n\n\n</code></pre>\n<p>for Q8</p>\n<pre><code class=\"lang-auto\">from fastapi import FastAPI\nfrom fastapi.responses import JSONResponse\nfrom fastapi.middleware.cors import CORSMiddleware\nfrom typing import Dict, Any\nimport re\n\n# Create the FastAPI app\napp = FastAPI()\n\n# CORS configuration to allow any origin\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"*\"],  # Allows all origins\n    allow_credentials=True,\n    allow_methods=[\"*\"],  # Allows all methods (GET, POST, etc.)\n    allow_headers=[\"*\"],  # Allows all headers\n)\ndef get_ticket_status(ticket_id: int) -&gt; Dict[str, Any]:\n    # Mock response for illustration purposes\n    return {\"ticket_id\": ticket_id, \"status\": \"open\"}\n\ndef schedule_meeting(date: str, time: str, meeting_room: str) -&gt; Dict[str, Any]:\n    # Mock response for illustration purposes\n    return {\"date\": date, \"time\": time, \"meeting_room\": meeting_room, \"status\": \"scheduled\"}\n\ndef get_expense_balance(employee_id: int) -&gt; Dict[str, Any]:\n    # Mock response for illustration purposes\n    return {\"employee_id\": employee_id, \"balance\": 1000.0}\n\ndef calculate_performance_bonus(employee_id: int, current_year: int) -&gt; Dict[str, Any]:\n    # Mock response for illustration purposes\n    return {\"employee_id\": employee_id, \"current_year\": current_year, \"bonus\": 500.0}\n\ndef report_office_issue(issue_code: int, department: str) -&gt; Dict[str, Any]:\n    # Mock response for illustration purposes\n    return {\"issue_code\": issue_code, \"department\": department, \"status\": \"reported\"}\nimport re\n\ndef extract_parameters(query: str) -&gt; Dict[str, Any]:\n    \"\"\"Extract parameters from the query string.\"\"\"\n    # Convert the query to lowercase for case-insensitive matching\n    query = query.strip().lower()\n\n    if match := re.match(r\"what is the status of ticket (\\d+)\\?\", query):\n        return {\n            \"name\": \"get_ticket_status\",\n            \"arguments\": {\"ticket_id\": int(match.group(1))}\n        }\n    elif match := re.match(r\"schedule a meeting on (\\d{4}-\\d{2}-\\d{2}) at (\\d{2}:\\d{2}) in (.+)\\.\", query):\n        return {\n            \"name\": \"schedule_meeting\",\n            \"arguments\": {\n                \"date\": match.group(1),\n                \"time\": match.group(2),\n                \"meeting_room\": match.group(3)\n            }\n        }\n    elif match := re.match(r\"show my expense balance for employee (\\d+)\\.\", query):\n        return {\n            \"name\": \"get_expense_balance\",\n            \"arguments\": {\"employee_id\": int(match.group(1))}\n        }\n    elif match := re.match(r\"calculate performance bonus for employee (\\d+) for (\\d{4})\\.\", query):\n        return {\n            \"name\": \"calculate_performance_bonus\",\n            \"arguments\": {\n                \"employee_id\": int(match.group(1)),\n                \"current_year\": int(match.group(2))\n            }\n        }\n    elif match := re.match(r\"report office issue (\\d+) for the (\\w+) department\\.\", query):\n        return {\n            \"name\": \"report_office_issue\",\n            \"arguments\": {\n                \"issue_code\": int(match.group(1)),\n                \"department\": match.group(2)\n            }\n        }\n    return {}\n\n@app.get(\"/execute\")\nasync def execute_query(q: str):\n    # Extract the function name and arguments from the query\n    result = extract_parameters(q)\n    \n    if not result:\n        return JSONResponse(content={\"error\": \"No matching function found for the query\"}, status_code=400)\n    \n    # Call the respective function\n    func_name = result[\"name\"]\n    arguments = result[\"arguments\"]\n    \n    # Call the function dynamically based on func_name\n    if func_name == \"get_ticket_status\":\n        response = get_ticket_status(**arguments)\n    elif func_name == \"schedule_meeting\":\n        response = schedule_meeting(**arguments)\n    elif func_name == \"get_expense_balance\":\n        response = get_expense_balance(**arguments)\n    elif func_name == \"calculate_performance_bonus\":\n        response = calculate_performance_bonus(**arguments)\n    elif func_name == \"report_office_issue\":\n        response = report_office_issue(**arguments)\n    \n    # Return the response in the requested format\n    return JSONResponse(content={\"name\": func_name, \"arguments\": arguments}, status_code=200)\n\n</code></pre>",
    "post_number": 1,
    "post_type": 1,
    "posts_count": 1,
    "updated_at": "2025-02-05T16:57:48.827Z",
    "reply_count": 0,
    "reply_to_post_number": null,
    "quote_count": 0,
    "incoming_link_count": 1,
    "reads": 22,
    "readers_count": 21,
    "score": 8.4,
    "yours": false,
    "topic_id": 166357,
    "topic_slug": "doubts-in-q7-q8",
    "display_username": "SAKSHI PATHAK",
    "primary_group_name": "ds-students",
    "flair_name": "ds-students",
    "flair_url": null,
    "flair_bg_color": "",
    "flair_color": "",
    "flair_group_id": 294,
    "badges_granted": [],
    "version": 1,
    "can_edit": false,
    "can_delete": false,
    "can_recover": false,
    "can_see_hidden_post": false,
    "can_wiki": false,
    "read": false,
    "user_title": null,
    "bookmarked": false,
    "actions_summary": [
      {
        "id": 2,
        "can_act": true
      },
      {
        "id": 6,
        "can_act": true
      },
      {
        "id": 3,
        "can_act": true
      },
      {
        "id": 4,
        "can_act": true
      },
      {
        "id": 8,
        "can_act": true
      },
      {
        "id": 10,
        "can_act": true
      },
      {
        "id": 7,
        "can_act": true
      }
    ],
    "moderator": false,
    "admin": false,
    "staff": false,
    "user_id": 40000,
    "hidden": false,
    "trust_level": 1,
    "deleted_at": null,
    "user_deleted": false,
    "edit_reason": null,
    "can_view_edit_history": true,
    "wiki": false,
    "post_url": "/t/doubts-in-q7-q8/166357/1",
    "user_cakedate": "2024-10-04",
    "reactions": [],
    "current_user_reaction": null,
    "reaction_users_count": 0,
    "current_user_used_main_reaction": false,
    "can_accept_answer": false,
    "can_unaccept_answer": false,
    "accepted_answer": false,
    "topic_accepted_answer": null,
    "can_vote": false
  }
]